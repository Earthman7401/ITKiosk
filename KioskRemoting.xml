<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KioskRemoting</name>
    </assembly>
    <members>
        <member name="T:Kiosk.Remoting.TimeoutException">
            <summary>
            代表通訊傳輸逾時的例外錯誤。
            </summary>
        </member>
        <member name="M:Kiosk.Remoting.TimeoutException.#ctor">
            <summary>
            初始化 TimeoutException 類別的新執行個體。 
            </summary>
        </member>
        <member name="M:Kiosk.Remoting.TimeoutException.#ctor(System.String)">
            <summary>
            初始化 TimeoutException 類別的新執行個體。 執行個體會包含指定的錯誤說明訊息。
            </summary>
            <param name="message">指定的錯誤說明訊息。</param>
        </member>
        <member name="M:Kiosk.Remoting.TimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 TimeoutException 類別的新執行個體。 執行個體會包含指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考。
            </summary>
            <param name="message">指定的錯誤說明訊息。</param>
            <param name="inner">內部例外狀況的參考。</param>
        </member>
        <member name="M:Kiosk.Remoting.TimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用序列化資料，初始化 TimeoutException 類別的新執行個體。
            </summary>
            <param name="info">存放序列物件資料的物件。</param>
            <param name="context">關於來源或目的端的內容資訊。</param>
        </member>
        <member name="T:Kiosk.Remoting.SerializeFailException">
            <summary>
            代表序列化失敗的例外錯誤。
            </summary>
        </member>
        <member name="M:Kiosk.Remoting.SerializeFailException.#ctor">
            <summary>
            初始化 SerializeFailException 類別的新執行個體。 
            </summary>
        </member>
        <member name="M:Kiosk.Remoting.SerializeFailException.#ctor(System.String)">
            <summary>
            初始化 SerializeFailException 類別的新執行個體。 執行個體會包含指定的錯誤說明訊息。
            </summary>
            <param name="message">指定的錯誤說明訊息。</param>
        </member>
        <member name="M:Kiosk.Remoting.SerializeFailException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 TimeoutException 類別的新執行個體。 執行個體會包含指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考。
            </summary>
            <param name="message">指定的錯誤說明訊息。</param>
            <param name="inner">內部例外狀況的參考。</param>
        </member>
        <member name="M:Kiosk.Remoting.SerializeFailException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用序列化資料，初始化 TimeoutException 類別的新執行個體。
            </summary>
            <param name="info">存放序列物件資料的物件。</param>
            <param name="context">關於來源或目的端的內容資訊。</param>
        </member>
        <member name="T:Kiosk.Remoting.RemoteObject">
            <summary>
            跨應用程式通訊的遠端服務操作型別,繼承自MarshalByRefObject
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.RemoteObject.obj">
            <summary>
            遠端通訊物件實體
            </summary>
        </member>
        <member name="M:Kiosk.Remoting.RemoteObject.#ctor(System.Object)">
            <summary>
            帶有伺服器資訊的建構子,自訂遠端通訊物件
            </summary>
            <param name="objData">伺服器資訊</param>
        </member>
        <member name="E:Kiosk.Remoting.RemoteObject.onReceiveMessage">
            <summary>
            遠端通訊物件接收遠端通訊時觸發的事件
            </summary>
        </member>
        <member name="T:Kiosk.Remoting.RemoteObject.ReceiveMessageEventArgs">
            <summary>
            定義遠端通訊物件接收遠端通訊時的事件參數
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.RemoteObject.ReceiveMessageEventArgs.sourceAppcliction">
            <summary>
            發送訊息的來源應用程式名稱
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.RemoteObject.ReceiveMessageEventArgs.targetApplication">
            <summary>
            接收訊息的目標應用程式名稱
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.RemoteObject.ReceiveMessageEventArgs.message">
            <summary>
            通訊訊息
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.RemoteObject.ReceiveMessageEventArgs.result">
            <summary>
            回應訊息
            </summary>
        </member>
        <member name="M:Kiosk.Remoting.RemoteObject.ReceiveMessageEventArgs.#ctor(System.String,System.String,System.String)">
             <summary>
             建構子
             </summary>
            <param name="source">發送訊息的來源應用程式名稱</param>
            <param name="target">接收訊息的目標應用程式名稱</param>
            <param name="msg">通訊訊息</param>
        </member>
        <member name="T:Kiosk.Remoting.RemoteObject.SubscribeEventArgs">
            <summary>
            定義遠端通訊物件接收到遠端事件訂閱時的事件參數
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.RemoteObject.SubscribeEventArgs.sourceAppcliction">
            <summary>
            註冊事件的來源應用程式名稱
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.RemoteObject.SubscribeEventArgs.targetApplication">
            <summary>
            接收事件訂閱的目標應用程式名稱
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.RemoteObject.SubscribeEventArgs.EventName">
            <summary>
            訂閱的事件名稱
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.RemoteObject.SubscribeEventArgs.Action">
            <summary>
            事件執行的委派方法
            </summary>
        </member>
        <member name="M:Kiosk.Remoting.RemoteObject.SubscribeEventArgs.#ctor(System.String,System.String,System.String,System.EventHandler)">
             <summary>
             建構子
             </summary>
            <param name="source">註冊事件的來源應用程式名稱</param>
            <param name="target">接收事件訂閱的目標應用程式名稱</param>
            <param name="eventName">訂閱的事件名稱</param>
             <param name="action">事件執行的委派方法</param>
        </member>
        <member name="M:Kiosk.Remoting.RemoteObject.InitializeLifetimeService">
            <summary>
            讓此遠端操作物件永不過期
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kiosk.Remoting.RemoteObject.SendMessage(System.String,System.String,System.String)">
            <summary>
            遠端通訊物件的主要通訊函數(等待回應)
            </summary>
            <param name="sourceAppcliction">來源應用程式</param>
            <param name="targetApplication">目標應用程式</param>
            <param name="message">通訊訊息</param>
            <returns>通訊回傳內容</returns>
        </member>
        <member name="M:Kiosk.Remoting.RemoteObject.PostMessage(System.String,System.String,System.String)">
            <summary>
            遠端通訊物件的主要通訊函數(不等待回應)
            </summary>
            <param name="sourceAppcliction">來源應用程式</param>
            <param name="targetApplication">目標應用程式</param>
            <param name="message">通訊訊息</param>
            <returns>通訊回傳內容</returns>
        </member>
        <member name="T:Kiosk.Remoting.KioskRemoting">
            <summary>
            負責應用程式間通訊的基礎處理類別
            </summary>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.WriteLog(System.String)">
            <summary>
            寫入LOG
            </summary>
            <param name="Msg">訊息</param>
        </member>
        <member name="T:Kiosk.Remoting.KioskRemoting.SyncEventHandler">
            <summary>
            用來執行非同步事件呼叫的委派(帶有一個字串類型的事件參數)
            </summary>
            <param name="EventArgs">傳遞的事件參數</param>
        </member>
        <member name="E:Kiosk.Remoting.KioskRemoting.onWriteLog">
            <summary>
            寫入Log資訊時觸發的事件
            </summary>
        </member>
        <member name="E:Kiosk.Remoting.KioskRemoting.onReceiveMessage">
            <summary>
            接收遠端通訊時觸發的事件(支援泛型)
            </summary>
        </member>
        <member name="T:Kiosk.Remoting.KioskRemoting.ReceiveMessageEventArgs">
            <summary>
            定義接收遠端通訊時的事件參數
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.ReceiveMessageEventArgs.sourceAppcliction">
            <summary>
            發送訊息的來源應用程式名稱
            </summary>
        </member>
        <member name="P:Kiosk.Remoting.KioskRemoting.ReceiveMessageEventArgs.SourceAppcliction">
            <summary>
            發送訊息的來源應用程式名稱
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.ReceiveMessageEventArgs.targetApplication">
            <summary>
            接收訊息的目標應用程式名稱
            </summary>
        </member>
        <member name="P:Kiosk.Remoting.KioskRemoting.ReceiveMessageEventArgs.TargetApplication">
            <summary>
            接收訊息的目標應用程式名稱
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.ReceiveMessageEventArgs.message">
            <summary>
            通訊訊息
            </summary>
        </member>
        <member name="P:Kiosk.Remoting.KioskRemoting.ReceiveMessageEventArgs.OriginalMessage">
            <summary>
            原始通訊訊息
            </summary>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.ReceiveMessageEventArgs.Message``1">
            <summary>
            通訊訊息(支援泛型)
            </summary>
            <typeparam name="T">通訊訊息型別</typeparam>
            <returns>通訊訊息</returns>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.ReceiveMessageEventArgs.result">
            <summary>
            回應訊息
            </summary>
        </member>
        <member name="P:Kiosk.Remoting.KioskRemoting.ReceiveMessageEventArgs.Result">
            <summary>
            回應訊息
            </summary>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.ReceiveMessageEventArgs.#ctor(System.String,System.String,System.String)">
             <summary>
             建構子
             </summary>
            <param name="source">發送訊息的來源應用程式名稱</param>
            <param name="target">接收訊息的目標應用程式名稱</param>
            <param name="msg">通訊訊息</param>
        </member>
        <member name="T:Kiosk.Remoting.KioskRemoting.SubscribeEventArgs">
            <summary>
            定義接收遠端事件訂閱時的事件參數
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.SubscribeEventArgs.sourceAppcliction">
            <summary>
            訂閱事件的來源應用程式名稱
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.SubscribeEventArgs.targetApplication">
            <summary>
            接收事件訂閱的目標應用程式名稱
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.SubscribeEventArgs.EventName">
            <summary>
            訂閱的事件名稱
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.SubscribeEventArgs.Action">
            <summary>
            事件執行的委派方法
            </summary>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.SubscribeEventArgs.#ctor(System.String,System.String,System.String,System.EventHandler)">
             <summary>
             建構子
             </summary>
            <param name="source">訂閱事件的來源應用程式名稱</param>
            <param name="target">接收事件訂閱的目標應用程式名稱</param>
            <param name="eventName">訂閱的事件名稱</param>
             <param name="action">事件執行的委派方法</param>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.remoteObj_onReceiveMessage(System.Object,Kiosk.Remoting.RemoteObject.ReceiveMessageEventArgs)">
            <summary>
            接收到遠端通訊時觸發
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            發生於應用程式解析組件失敗時觸發的事件
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.CurrentDomain_ProcessExit(System.Object,System.EventArgs)">
            <summary>
            引用元件的應用程式結束時觸發
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.Application_ApplicationExit(System.Object,System.EventArgs)">
            <summary>
            引用元件的應用程式結束時觸發
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.SPILT_CHAR">
            <summary>
            應用程式訊息接收與傳送時參數的的分割字元
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.TIMEOUT">
            <summary>
            應用程式訊息呼叫逾時的常數字串
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.intTimeout">
            <summary>
            預設通訊逾時秒數
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.thisLock">
            <summary>
            用來鎖定的物件, 保證有執行緒在鎖定關鍵區段時, 絕對不會有任何其他執行緒同時也進入鎖定的關鍵區段執行<para/>
            如果其他執行緒嘗試進入已鎖定的區段，它將會等候、封鎖，直到該物件被釋出
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.isDisposed">
            <summary>
            物件資源是否已被釋放
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.clientChannel">
            <summary>
            應用程式的客戶端通道
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.serverChannel">
            <summary>
            應用程式的伺服器通道
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.currentApplicationName">
            <summary>
            當前應用程式通訊通道名稱
            </summary>
        </member>
        <member name="P:Kiosk.Remoting.KioskRemoting.CurrentApplicationName">
            <summary>
            當前應用程式通訊通道名稱
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.dicPublishEvent">
            <summary>
            遠端應用程式開放訂閱的事件通知字典集合
            </summary>
            <remarks>Key:訂閱的事件名稱, Value:訂閱者的應用程式名稱集合 </remarks>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.dicSubscribeEvent">
            <summary>
            已訂閱的事件通知字典集合
            </summary>
            <remarks>Key:目標應用程式名稱, Value:包含訂閱相關資訊的事件參數字典集合 (Key:事件名稱, Value:事件相關資訊) </remarks>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.#ctor">
            <summary>
            建構子,提供給引用元件的應用程式初始化通訊類別物件
            </summary>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.#ctor(System.String)">
            <summary>
            建構子,提供給引用元件的應用程式初始化通訊類別物件
            </summary>
            <param name="applicationName">指定應用程式通訊識別名稱</param>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.InitClient">
            <summary>
            初使化客戶端通道設定
            </summary>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.InitServer(System.String)">
            <summary>
            以應用程式相關資訊初使化伺服器通道設定
            </summary>
            <param name="applicationName">應用程式名稱</param>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.Init">
            <summary>
            物件初始化工作
            </summary>
        </member>
        <member name="T:Kiosk.Remoting.KioskRemoting.AsyncsendMessageCaller">
            <summary>
            與SendMessage方法據有相同簽章的委派, 用來執行非同步呼叫
            </summary>
            <param name="SourceAppcliction">來源應用程式</param>
            <param name="TargetApplication">目標應用程式</param>
            <param name="message">通訊訊息</param>
            <returns>通訊回傳內容</returns>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.sendMessageCaller">
            <summary>
            用來非同步呼叫物件SendMessage方法的委派執行個體
            </summary>
        </member>
        <member name="F:Kiosk.Remoting.KioskRemoting.objInstance">
            <summary>
            單一通訊物件實體
            </summary>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.GetRemotingInstance(System.String)">
            <summary>
            取得通訊物件實體
            </summary>
            <param name="applicationName">指定註冊的識別應用程式通訊名稱,若為空字串則預設採用應用程式名稱</param>
            <returns>通訊物件實體</returns>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.GetParameters(System.String)">
            <summary>
            依據傳入的命令字串傳回key與value對應的字典集合
            </summary>
            <param name="parameterString">命令字串</param>
            <returns>參數字典集合</returns>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.GetParameterString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            依據傳入的key與value對應的字典集合傳回命令字串
            </summary>
            <param name="parameters">參數字典集合</param>
            <returns>命令字串</returns>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.JsonSerialize(System.Object)">
            <summary>
            序列化物件並產生 JSON 字串
            </summary>
            <typeparam name="T">要序列化的物件的型別。</typeparam>
            <param name="t">要序列化的物件。</param>
            <returns>序列化的 JSON 字串。</returns>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.JsonDeserialize``1(System.String)">
            <summary>
            將指定的 JSON 字串轉換成 T 型別的物件。
            </summary>
            <typeparam name="T">產生的物件型別。</typeparam>
            <param name="jsonString">要還原序列化的 JSON 字串。</param>
            <returns>還原序列化的物件。</returns>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.SendMessage``2(System.String,``0)">
            <summary>
            向指定的應用程式送出訊息(等待回應), 支援泛型
            </summary>
            <typeparam name="TMessage">送出的訊息物件型別</typeparam>
            <typeparam name="TResult">目標應用程式回應的訊息物件型別</typeparam>
            <param name="targetApplicationName">目標應用程式名稱</param>
            <param name="message">送出的訊息物件</param>
            <returns>目標應用程式回應的訊息物件</returns>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.SendMessage``2(System.String,``0,System.Int32)">
            <summary>
            向指定的應用程式送出訊息(等待回應), 支援泛型
            </summary>
            <typeparam name="TMessage">送出的訊息物件型別</typeparam>
            <typeparam name="TResult">目標應用程式回應的訊息物件型別</typeparam>
            <param name="targetApplicationName">目標應用程式名稱</param>
            <param name="message">送出的訊息物件</param>
            <param name="timeoutSecond">呼叫等待逾時秒數, 預設為10秒</param>
            <returns>目標應用程式回應的訊息物件</returns>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.SendMessage(System.String,System.String)">
            <summary>
            向指定的應用程式送出訊息(等待回應)
            </summary>
            <param name="targetApplicationName">目標應用程式名稱</param>
            <param name="message">送出的訊息</param>
            <returns>目標應用程式回應的訊息</returns>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.SendMessage(System.String,System.String,System.Int32)">
            <summary>
            向指定的應用程式送出訊息(等待回應)
            </summary>
            <param name="targetApplicationName">目標應用程式名稱</param>
            <param name="message">送出的訊息</param>
            <param name="timeoutSecond">呼叫等待逾時秒數, 預設為10秒</param>
            <returns>目標應用程式回應的訊息</returns>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.PostMessage``1(System.String,``0)">
            <summary>
            向指定的應用程式送出訊息(不等待回應), 支援泛型
            </summary>
            <typeparam name="TMessage">送出的訊息物件型別</typeparam>
            <param name="targetApplicationName">目標應用程式名稱</param>
            <param name="message">送出的訊息</param>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.PostMessage(System.String,System.String)">
            <summary>
            向指定的應用程式送出訊息(不等待回應)
            </summary>
            <param name="targetApplicationName">目標應用程式名稱</param>
            <param name="message">送出的訊息</param>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.PublishEvent(System.String)">
            <summary>
            通知指定的事件已被觸發
            </summary>
            <param name="eventName">事件名稱</param>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.SubscribeEvent(System.String,System.String,System.EventHandler)">
            <summary>
            向指定的應用程訂閱事件通知
            </summary>
            <param name="targetApplicationName">目標應用程式名稱</param>
            <param name="eventName">事件名稱</param>
            <param name="action">事件執行的委派方法(以同步方式及註冊先後循序執行)</param>
            <returns>訂閱是否成功</returns>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.CancelAllSubscribeEvent(System.String,System.String)">
            <summary>
            向指定的應用程取消訂閱事件通知(該事件所有曾註冊過的EventHandler皆會取消)
            </summary>
            <param name="targetApplicationName">目標應用程式名稱</param>
            <param name="eventName">事件名稱</param>
            <returns>取消訂閱是否成功</returns>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.Broadcast``1(``0)">
            <summary>
            向所有註冊通道的應用程式廣播訊息, 支援泛型
            </summary>
            <typeparam name="TMessage">送出的訊息物件型別</typeparam>
            <param name="message">送出的訊息</param>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.Broadcast(System.String)">
            <summary>
            向所有註冊通道的應用程式廣播訊息
            </summary>
            <param name="message">送出的訊息</param>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.RegisterApplication(System.String)">
            <summary>
            註冊指定應用程式通訊機碼
            </summary>
            <param name="applicationName">應用程式名稱</param>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.UnRegisterApplication(System.String)">
            <summary>
            移除指定應用程式通訊機碼
            </summary>
            <param name="applicationName">應用程式名稱</param>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.GetRemoteObject(System.String)">
            <summary>
            依據指定的應用程式名稱,取得該應用程式的遠端通訊物件
            </summary>
            <param name="applicationName"></param>
            <returns>指定應用程式的遠端通訊物件</returns>
        </member>
        <member name="M:Kiosk.Remoting.KioskRemoting.Dispose">
            <summary>
            釋放物件所使用到的資源
            </summary>
        </member>
        <member name="T:Kiosk.Remoting.Registry">
            <summary>
            封裝機碼相關存取操作邏輯的靜態類別
            </summary>
        </member>
        <member name="M:Kiosk.Remoting.Registry.SetRegValue(System.String,System.Object,System.String,Microsoft.Win32.RegistryKey)">
            <summary>
            設定機碼參數的值
            </summary>
            <param name="Name">參數名稱</param>
            <param name="value">值</param>
            <param name="path">機碼路徑</param>
            <param name="type">機碼類型</param>
            <returns>執行結果</returns>
        </member>
        <member name="M:Kiosk.Remoting.Registry.GetRegValue(System.String,System.String,Microsoft.Win32.RegistryKey)">
            <summary>
            取得機碼參數的值
            </summary>
            <param name="Name">參數名稱</param>
            <param name="path">機碼路徑</param>
            <param name="type">機碼類型</param>
            <returns>值,若沒有此機碼則回傳空字串</returns>
        </member>
        <member name="M:Kiosk.Remoting.Registry.CreateReg(System.String,System.Object,System.String,Microsoft.Win32.RegistryKey)">
            <summary>
            建立機碼
            </summary>
            <param name="Name">參數名稱</param>
            <param name="value">值</param>
            <param name="path">機碼路徑</param>
            <param name="type">機碼類型</param>
            <returns>執行結果</returns>
        </member>
        <member name="M:Kiosk.Remoting.Registry.DelReg(System.String,System.String,Microsoft.Win32.RegistryKey)">
            <summary>
            刪除機碼
            </summary>
            <param name="Name">機碼名稱</param>
            <param name="path">機碼路徑</param>
            <param name="type">機碼類型</param>
            <returns>執行結果</returns>
        </member>
        <member name="M:Kiosk.Remoting.Registry.DelRegValue(System.String,System.String,Microsoft.Win32.RegistryKey)">
            <summary>
            刪除機碼值
            </summary>
            <param name="Name">參數名稱</param>
            <param name="path">機碼路徑</param>
            <param name="type">機碼類型</param>
            <returns>執行結果</returns>
        </member>
        <member name="M:Kiosk.Remoting.Registry.GetRegValueList(System.String,Microsoft.Win32.RegistryKey)">
            <summary>
            取得機碼內所有機碼名稱
            </summary>
            <param name="path">機碼路徑</param>
            <param name="type">機碼類型</param>
            <returns>機碼名稱字串陣列</returns>
        </member>
    </members>
</doc>
